{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAEZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCR1CK,EAAU,2DAeD,EAbA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAW9B,EATA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAO9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCA9BK,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGP,yBAAKd,UAAU,SACVc,ICWEC,EAhBA,WAQX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,4HCuEGC,EA/EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IAEH,IAkBMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAmB9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAce,QAASc,IACvB,6BACE,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLxC,KAAMA,EACNC,iBAAkB,kBA/BD,SAACc,GAC1B,IAAMf,EAAO0B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,2BAAQ5C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACUpB,EAAI6B,GACXlC,MAAK,SAAAmC,GACJlB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO6C,SAEpDC,OAAM,SAAAC,GACLd,EAAgB,aAAD,OAAcjC,EAAKK,QAAnB,0CACf2C,YAAW,WACTf,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAE5B,KAAOA,SAiBRkC,CAAmBjD,EAAKe,WAGtD,0BAAMmC,SAxDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBhD,QAASuB,EACT0B,KAAM,IAAIC,KACVpD,UAAWqD,KAAKC,SAAW,IAE7BtB,EACUkB,GACP3C,MAAK,SAAAmC,GACJlB,EAASD,EAAMgC,OAAOb,IACtBhB,EAAW,SA8CX,2BAAO8B,MAAO/B,EAASgC,SA3CJ,SAACT,GACxBtB,EAAWsB,EAAMU,OAAOF,UA2CpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC3ENC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.74c2a56e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n\n    const label = note.important ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = 'https://gurupratap-notes-backend.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\n\nconst Footer = () => {\n\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of research and investigation, University of La Plata, Argentina 2020</em>\n        </div>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() > 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`the note '${note.content}' was already deleted from the server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type='submit'>Save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}